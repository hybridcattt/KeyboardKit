{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use KeyboardKit in many different ways:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Keyboard extensions can use KeyboardKit to create more powerful keyboards."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apps can use KeyboardKit to check if a keyboard is enabled, has full access etc."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apps can create custom input controllers and use KeyboardKit for the text field."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"All targets, such as apps, keyboard extensions, widgets etc. can use KeyboardKit to build upon its functionality."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"KeyboardKit supports iOS, iPadOS, macOS, tvOS and watchOS, although some functionality is only available on some platforms."}]},{"anchor":"How-to-install-KeyboardKit","level":2,"type":"heading","text":"How to install KeyboardKit"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KeyboardKit can be installed with the Swift Package Manager:"}]},{"type":"codeListing","syntax":null,"code":["https:\/\/github.com\/KeyboardKit\/KeyboardKit.git"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add KeyboardKit to the main app, the keyboard extension and any targets that need it."}]},{"anchor":"How-to-setup-KeyboardKit","level":2,"type":"heading","text":"How to setup KeyboardKit"},{"type":"paragraph","inlineContent":[{"type":"text","text":"After installing KeyboardKit, just "},{"type":"codeVoice","code":"import KeyboardKit"},{"type":"text","text":" and make your "},{"type":"codeVoice","code":"KeyboardViewController"},{"type":"text","text":" inherit "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"UIInputViewController"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["import KeyboardKit","","class KeyboardController: KeyboardInputViewController {}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This gives your controller access to additional functionality, such as new lifecycle functions like "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewWillSetupKeyboard()"},{"type":"text","text":", observable state like "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardContext"},{"type":"text","text":", services like "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardActionHandler"},{"type":"text","text":" and much more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController"},{"type":"text","text":" behavior is to setup an English "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/SystemKeyboard"},{"type":"text","text":". It will then call "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewWillSetupKeyboard()"},{"type":"text","text":" when the keyboard view should be created or updated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To set up KeyboardKit with a custom view, you can override "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewWillSetupKeyboard()"},{"type":"text","text":" and call "},{"type":"codeVoice","code":".setup(with:)"},{"type":"text","text":" to customize the "},{"type":"codeVoice","code":"SystemKeyboard"},{"type":"text","text":" or use a custom view:"}]},{"type":"codeListing","syntax":"swift","code":["class KeyboardViewController: KeyboardInputViewController {","","    func viewWillSetupKeyboard() {","        super.viewWillSetupKeyboard()","        setup { controller in","            VStack(spacing: 0) {","                MyCustomToolbar()","                SystemKeyboard(","                    controller: controller,","                    autocompleteToolbar: .none","                )","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, we use a completely custom view that requires a controller reference:"}]},{"type":"codeListing","syntax":"swift","code":["struct CustomKeyboard: View {","","    unowned var controller: KeyboardViewController ","","    var body: some View {","        ... ","    }","}","","class KeyboardViewController: KeyboardInputViewController {","","    func viewWillSetupKeyboard() {","        super.viewWillSetupKeyboard()","        setup { controller in","            CustomKeyboard(controller: controller)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The view builder provides an unowned controller reference to avoid reference cycles and memory leaks."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s important to never use "},{"type":"codeVoice","code":"controller: self"},{"type":"text","text":" and to mark "},{"type":"codeVoice","code":"controller"},{"type":"text","text":" properties as "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":", otherwise the strong controller reference will cause a memory leak."}]}],"type":"aside","name":"Important"},{"anchor":"How-to-use-the-standard-keyboard-configuration","level":2,"type":"heading","text":"How to use the standard keyboard configuration"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController"},{"type":"text","text":" will by default be configured with a bunch of service instances and observable state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardActionHandler"},{"type":"text","text":" is set to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/StandardKeyboardActionHandler"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/calloutActionProvider"},{"type":"text","text":" to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/StandardCalloutActionProvider"},{"type":"text","text":", etc."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The controller also has many observable state properties, such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardContext"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/autocompleteContext"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/calloutContext"},{"type":"text","text":", etc."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The various services can then be passed into any views that need them, and any observable state accessed as environment objects:"}]},{"type":"codeListing","syntax":"swift","code":["struct CustomKeyboard: View {","","    let actionHandler: KeyboardActionHandler","","    @EnvironmentObject","    private var context: KeyboardContext","","    var body: some View {","        VStack {","            Text(\"Space only keyboard\")","            Button {","                actionHandler.handle(.space)","            } label: {","                Text(\"My cool space only keyboard\")","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note some state types are set up by the controller. For instance, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/ExternalKeyboardContext"},{"type":"text","text":" state must be manually added:"}]},{"type":"codeListing","syntax":"swift","code":["struct CustomKeyboard: View {","","    @StateObject","    private var externalContext = ExternalKeyboardContext()","","    var body: some View {","        Text(\"My custom view\")","            .environmentObject(externalContext)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Environment objects are convenient, but the views in the library use init parameters to clearly communicate their dependencies."}]},{"anchor":"How-to-customize-the-standard-configuration","level":2,"type":"heading","text":"How to customize the standard configuration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can easily customize the standard configuration by replacing any of the standard services with a custom implementations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, here we replace the default keyboard action handler with a custom one:"}]},{"type":"codeListing","syntax":"swift","code":["class CustomActionHandler: StandardActionHandler {","","    open override func canHandle(_ gesture: KeyboardGesture, on action: KeyboardAction) -> Bool {","        false   \/\/ Wow, what a useless action handler! ","    }","}","","class KeyboardViewController: KeyboardInputViewController {","","    override func viewDidLoad() {","        keyboardActionHandler = CustomActionHandler(inputViewController: self)","        super.viewDidLoad()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since service instances are lazy, you should customize them as early as possible to make sure that all parts of the keyboard use the correct service type."}]},{"anchor":"Going-further","level":2,"type":"heading","text":"Going further"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You should now have a basic understanding of how to set up KeyboardKit, how to use the various services and state types and how to customize the standard configuration."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information and examples, see the various articles and take a look at the demo apps, which replace many services with demo-specific implementations."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/keyboardkit\/getting-started"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Getting-Started","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This article discusses how get started with KeyboardKit."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Getting Started","role":"article","modules":[{"name":"KeyboardKit"}]},"hierarchy":{"paths":[["doc:\/\/KeyboardKit\/documentation\/KeyboardKit"]]},"references":{"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/keyboardActionHandler":{"role":"symbol","title":"keyboardActionHandler","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"keyboardActionHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyboardActionHandler","preciseIdentifier":"s:11KeyboardKit0A13ActionHandlerP"}],"abstract":[{"type":"text","text":"The action handler that will be used by the keyboard to"},{"type":"text","text":" "},{"type":"text","text":"handle keyboard actions."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardActionHandler","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/keyboardactionhandler"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/keyboardContext":{"role":"symbol","title":"keyboardContext","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"keyboardContext"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyboardContext","preciseIdentifier":"s:11KeyboardKit0A7ContextC"}],"abstract":[{"type":"text","text":"The default, observable keyboard context."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardContext","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/keyboardcontext"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/calloutActionProvider":{"role":"symbol","title":"calloutActionProvider","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"calloutActionProvider"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CalloutActionProvider","preciseIdentifier":"s:11KeyboardKit21CalloutActionProviderP"}],"abstract":[{"type":"text","text":"The callout action provider that is used to provide the"},{"type":"text","text":" "},{"type":"text","text":"keyboard with secondary callout actions."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/calloutActionProvider","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/calloutactionprovider"},"doc://KeyboardKit/documentation/KeyboardKit/StandardCalloutActionProvider":{"role":"symbol","title":"StandardCalloutActionProvider","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StandardCalloutActionProvider"}],"abstract":[{"type":"text","text":"This provider is initialized with a collection of localized"},{"type":"text","text":" "},{"type":"text","text":"providers, and will use the one with the same locale as the"},{"type":"text","text":" "},{"type":"text","text":"provided "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardContext"},{"type":"text","text":"."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/StandardCalloutActionProvider","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StandardCalloutActionProvider"}],"url":"\/documentation\/keyboardkit\/standardcalloutactionprovider"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController":{"role":"symbol","title":"KeyboardInputViewController","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyboardInputViewController"}],"abstract":[{"type":"text","text":"This class extends "},{"type":"codeVoice","code":"UIInputViewController"},{"type":"text","text":" with KeyboardKit"},{"type":"text","text":" "},{"type":"text","text":"specific functionality."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"KeyboardInputViewController"}],"url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/calloutContext":{"role":"symbol","title":"calloutContext","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"calloutContext"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CalloutContext","preciseIdentifier":"s:11KeyboardKit14CalloutContextC"}],"abstract":[{"type":"text","text":"The default, observable callout context."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/calloutContext","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/calloutcontext"},"doc://KeyboardKit/documentation/KeyboardKit/SystemKeyboard":{"role":"symbol","title":"SystemKeyboard","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SystemKeyboard"}],"abstract":[{"type":"text","text":"This keyboard can be used to create alphabetic, numeric and"},{"type":"text","text":" "},{"type":"text","text":"symbolic keyboards that mimic the native iOS keyboard."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/SystemKeyboard","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SystemKeyboard"}],"url":"\/documentation\/keyboardkit\/systemkeyboard"},"doc://KeyboardKit/documentation/KeyboardKit":{"role":"collection","title":"KeyboardKit","abstract":[{"type":"text","text":"KeyboardKit helps you build custom keyboards with Swift and SwiftUI."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/autocompleteContext":{"role":"symbol","title":"autocompleteContext","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"autocompleteContext"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AutocompleteContext","preciseIdentifier":"s:11KeyboardKit19AutocompleteContextC"}],"abstract":[{"type":"text","text":"The default, observable autocomplete context."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/autocompleteContext","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/autocompletecontext"},"doc://KeyboardKit/documentation/KeyboardKit/StandardKeyboardActionHandler":{"role":"symbol","title":"StandardKeyboardActionHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StandardKeyboardActionHandler"}],"abstract":[{"type":"text","text":"This standard keyboard action handler is used by default by"},{"type":"text","text":" "},{"type":"text","text":"KeyboardKit and provides a standard way of handling actions."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/StandardKeyboardActionHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StandardKeyboardActionHandler"}],"url":"\/documentation\/keyboardkit\/standardkeyboardactionhandler"},"doc://KeyboardKit/documentation/KeyboardKit/ExternalKeyboardContext":{"role":"symbol","title":"ExternalKeyboardContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExternalKeyboardContext"}],"abstract":[{"type":"text","text":"This class can be used to detect whether or not an external"},{"type":"text","text":" "},{"type":"text","text":"keyboard is connected to the device."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/ExternalKeyboardContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExternalKeyboardContext"}],"url":"\/documentation\/keyboardkit\/externalkeyboardcontext"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardContext":{"role":"symbol","title":"KeyboardContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyboardContext"}],"abstract":[{"type":"text","text":"This class provides keyboard extensions with contextual and"},{"type":"text","text":" "},{"type":"text","text":"observable information about the keyboard extension itself."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"KeyboardContext"}],"url":"\/documentation\/keyboardkit\/keyboardcontext"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/viewWillSetupKeyboard()":{"role":"symbol","title":"viewWillSetupKeyboard()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"viewWillSetupKeyboard"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"This function is called whenever the keyboard view must"},{"type":"text","text":" "},{"type":"text","text":"be created or updated."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewWillSetupKeyboard()","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/viewwillsetupkeyboard()"}}}